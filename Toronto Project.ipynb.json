{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PART 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get HTML of the desired wiki page\n",
    "import requests\n",
    "url = requests.get(\"https://en.wikipedia.org/wiki/List_of_postal_codes_of_Canada:_M\").text\n",
    "\n",
    "# Parse data from wiki page into soup object\n",
    "from bs4 import BeautifulSoup\n",
    "soup = BeautifulSoup(url,'lxml')\n",
    "\n",
    "# Extract the table containing the desired data\n",
    "my_table = soup.find('table', class_ = 'wikitable sortable')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(103, 3)"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create empty lists for each column in final table\n",
    "A=[]\n",
    "B=[]\n",
    "C=[]\n",
    "\n",
    "# Pull contents from table and place into created lists\n",
    "for row in my_table.findAll(\"tr\"):\n",
    "    cells = row.findAll('td')\n",
    "    if len(cells)==3:\n",
    "        col_A_contents = (cells[0].find(text=True)).rstrip()\n",
    "        col_B_contents = (cells[1].find(text=True)).rstrip()\n",
    "        col_C_contents = (cells[2].find(text=True)).rstrip()\n",
    "        if col_B_contents != 'Not assigned':\n",
    "            A.append(col_A_contents)\n",
    "            B.append(col_B_contents)\n",
    "            if col_C_contents == 'Not assigned':\n",
    "                col_C_contents = col_B_contents\n",
    "            C.append(col_C_contents) \n",
    "\n",
    "# Import pandas to convert list to data frame\n",
    "import pandas as pd\n",
    "df = pd.DataFrame(A, columns = ['Postal Code'])\n",
    "df['Borough'] = B\n",
    "df['Neighbourhood'] = C\n",
    "\n",
    "# Consolidate duplicate Postal Codes\n",
    "df_neighbourhood = df.groupby(['Postal Code', 'Borough'])['Neighbourhood'].apply(list)\n",
    "df_neighbourhood = df_neighbourhood.to_frame()\n",
    "df_neighbourhood = df_neighbourhood.reset_index()\n",
    "\n",
    "# Print df shape\n",
    "df_neighbourhood.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PART 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import geospatial data\n",
    "url2 = \"https://cocl.us/Geospatial_data\"\n",
    "df_geo = pd.read_csv(url2)\n",
    "\n",
    "# Merge the Neighbourhood df with the Geospatial df\n",
    "df_merged = pd.merge(df_neighbourhood, df_geo, on='Postal Code')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PART 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter results to boroughs containing the word 'Toronto'\n",
    "toronto_data = df_merged[df_merged['Borough'].str.contains('Toronto')] \n",
    "\n",
    "# Get geographical coordinates of Toronto\n",
    "address = 'Toronto, ON'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "# !conda install -c conda-forge geopy --yes\n",
    "from geopy.geocoders import Nominatim\n",
    "\n",
    "# !conda install -c conda-forge folium=0.5.0 --yes\n",
    "import folium\n",
    "\n",
    "geolocator = Nominatim(user_agent=\"toronto_explorer\")\n",
    "location = geolocator.geocode(address)\n",
    "latitude = location.latitude\n",
    "longitude = location.longitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x7fab5679fdd8>"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create map of Toronto using latitude and longitude values\n",
    "map_TO = folium.Map(location=[latitude, longitude], zoom_start=10)\n",
    "\n",
    "# add markers to map\n",
    "for lat, lng, borough, neighbourhood in zip(toronto_data['Latitude'], toronto_data['Longitude'], toronto_data['Borough'], toronto_data['Neighbourhood']):\n",
    "    label = '{}, {}'.format(neighbourhood, borough)\n",
    "    label = folium.Popup(label, parse_html=True)\n",
    "    folium.CircleMarker(\n",
    "        [lat, lng],\n",
    "        radius=5,\n",
    "        popup=label,\n",
    "        color='blue',\n",
    "        fill=True,\n",
    "        fill_color='#3186cc',\n",
    "        fill_opacity=0.7,\n",
    "        parse_html=False).add_to(map_TO)  \n",
    "    \n",
    "map_TO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.6",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
